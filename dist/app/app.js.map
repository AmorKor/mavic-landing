{"version":3,"sources":["qa.js","scroll.js"],"names":[],"mappingsfile":"app.js","sourcesContent":["function showContent(controller, controllerActive, content, contentActive) {\r\n    this.contents = Array.from(document.querySelectorAll(content))\r\n    this.contentActive = contentActive\r\n    this.controllers = Array.from(document.querySelectorAll(controller))\r\n    this.controllerActive = controllerActive\r\n    \r\n    return {\r\n        init(action) {\r\n            controllers.forEach((button, i) => {\r\n                button.addEventListener(action, () => {\r\n                    if(contents[i].classList.contains(contentActive.slice(1))) {\r\n                        this.hide(contents[i], button)\r\n                    } else {\r\n                        this.show(contents[i], button)\r\n                        this.hideAll(contents[i], button)\r\n                    }\r\n                }) \r\n            }) \r\n        },\r\n        \r\n        show(element, controller, isSingle) {\r\n            element.classList.add(contentActive.slice(1))\r\n            this.changeControllerState(controller, isSingle)\r\n        },\r\n        \r\n        hide(element, controller, isSingle) {\r\n            element.classList.remove(contentActive.slice(1))\r\n            this.changeControllerState(controller, isSingle)\r\n        },\r\n        \r\n        hideAll(exeption, exeptionController) {\r\n            contents.forEach((element, i) => {\r\n                if(!(element === exeption && exeptionController === controllers[i])) {\r\n                    this.hide(element, exeptionController, false)\r\n                }\r\n            })\r\n        },\r\n\r\n        changeControllerState(controller, isSingle = true) {\r\n            if(controller.classList.contains(controllerActive.slice(1)) && isSingle) {\r\n                controller.classList.remove(controllerActive.slice(1))\r\n            } else if(controller.classList.contains(controllerActive.slice(1)) && !isSingle) {\r\n                controllers.forEach(element => {\r\n                    element.classList.remove(controllerActive.slice(1))\r\n                })\r\n                controller.classList.add(controllerActive.slice(1))\r\n            } else {\r\n                controller.classList.add(controllerActive.slice(1))\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst qa = showContent(\r\n    '.question__controller',\r\n    '.question__controller--active',\r\n    '.question__answer',\r\n    '.question__answer--active')\r\n\r\nqa.init('click')\r\n\r\n\r\n","// general slider class\r\nclass Slider {\r\n    // get correct box size for proper scrolling\r\n    setContainerSize(container, horizontal = true) {\r\n        this.body = container\r\n        \r\n        if(horizontal) {\r\n            this.containerSize = this.body.clientWidth\r\n        } else {\r\n            this.containerSize = this.body.clientHeight\r\n        }\r\n    }\r\n    \r\n    constructor(\r\n        scrollingContainerSelector,\r\n        referenceContainerSelector,\r\n        pageSelector,\r\n        buttonSelectors \r\n    ) {\r\n        this.container = document.querySelector(scrollingContainerSelector)\r\n        this.referenceContainer = document.querySelector(referenceContainerSelector)\r\n       \r\n        this.buttonSelectors = {\r\n            common: buttonSelectors['common'],\r\n            disabled: buttonSelectors['disabled']\r\n        }\r\n        this.buttons = Array.from(document.querySelectorAll(this.buttonSelectors['common']))\r\n        \r\n        this.containerSize\r\n        this.setContainerSize(this.referenceContainer)\r\n\r\n        this.pages = Array.from(document.querySelectorAll(pageSelector))\r\n\r\n        this.activePage = 0\r\n        this.pagesCollection = this.pages.map((el, i) => {\r\n                                    return {\r\n                                        pageNode: this.pages[i],\r\n                                        pageNumber: this.pages.indexOf(this.pages[i]) + 1,\r\n                                    }\r\n                                }) \r\n    }\r\n    \r\n    get getContainerSize() {\r\n        return this.containerSize\r\n    }    \r\n    \r\n    scrollTo(pageNum, horizontal = true, hasZeroSlider = false) {\r\n        if((pageNum === this.pagesCollection.length && hasZeroSlider === false) || pageNum < 0) return\r\n\r\n        this.setContainerSize(this.referenceContainer)\r\n        let desiredPage\r\n        \r\n        if(pageNum > 0) {\r\n            desiredPage = this.pagesCollection[pageNum - 1].pageNumber\r\n        } else {\r\n            desiredPage = this.pagesCollection[pageNum].pageNumber - 1\r\n        }\r\n\r\n        if(horizontal) {\r\n            this.container.style.transform = `translateX(-${this.containerSize * desiredPage}px)`\r\n        } else {\r\n            this.container.style.transform = `translateY(-${this.containerSize * desiredPage}px)`\r\n        }\r\n\r\n        \r\n        this.container.addEventListener('transitionend', () => {\r\n            this.checkSliderState()\r\n        })\r\n    }\r\n    \r\n    checkSliderState() {\r\n        this.setActivePage()\r\n        this.checkButtons()\r\n    }\r\n    \r\n    getShiftValue() {\r\n        const transString = this.container.getAttribute('style') \r\n\r\n        const currentShift = parseInt(\r\n                transString.slice(\r\n                    transString.indexOf('-'),\r\n                    transString.indexOf(')'))\r\n                )   \r\n        \r\n        return currentShift\r\n    }\r\n    \r\n    // recalc transition value to fix appearence on window resizing\r\n    fixPosition() {\r\n        if(!(this.container.hasAttribute('style'))) return\r\n\r\n        const currentShift = this.getShiftValue()\r\n        \r\n        const oldSize = this.containerSize\r\n        this.setContainerSize(this.referenceContainer)\r\n        const newSize = this.containerSize\r\n\r\n        this.container.style.transform = `translateY(${currentShift + (this.activePage * (oldSize - newSize))}px)`\r\n    }\r\n\r\n    \r\n    isInView(element, container, elemNum) {\r\n        this.rect = element.getBoundingClientRect()\r\n        this.wrapper = container.parentElement.getBoundingClientRect()\r\n                \r\n        return (\r\n            this.rect.left === this.wrapper.left\r\n        )\r\n    }\r\n\r\n    \r\n    setActivePage() {\r\n        this.pagesCollection.forEach((el, i) => {\r\n            if(this.isInView(this.pagesCollection[i].pageNode, this.container)) {\r\n                this.activePage = this.pagesCollection[i].pageNumber - 1\r\n            } \r\n        })\r\n    }\r\n\r\n    checkButtons(hasZeroSlider = false) {     \r\n        this.firstIndex = 0\r\n        this.lastIndex = this.buttons.length - 1 \r\n           \r\n        if(this.activePage === this.pagesCollection.length && hasZeroSlider === true) {\r\n            this.buttons[this.lastIndex].classList.add(this.buttonSelectors['disabled'].slice(1))\r\n            this.buttons[this.lastIndex].setAttribute('disabled', '')\r\n        } else if(this.activePage + 1 === this.pagesCollection.length && hasZeroSlider === false) {\r\n            this.buttons[this.lastIndex].classList.add(this.buttonSelectors['disabled'].slice(1))\r\n            this.buttons[this.lastIndex].setAttribute('disabled', '')\r\n        } else if(this.activePage === 0 && hasZeroSlider === false) {\r\n            this.buttons[this.firstIndex].classList.add(this.buttonSelectors['disabled'].slice(1))\r\n            this.buttons[this.firstIndex].setAttribute('disabled', '')\r\n        } else {\r\n            this.buttons.forEach((button, i) => {\r\n                button.classList.remove(this.buttonSelectors['disabled'].slice(1))\r\n                button.removeAttribute('disabled')\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nconst aboutSlider = new Slider(\r\n    '.slider__inner',\r\n    '.slider__wrapper',\r\n    '.slider__img',\r\n    {\r\n        common: '.slider__controller',\r\n        disabled: '.controller--disabled',\r\n    },\r\n)\r\n\r\nconsole.log(aboutSlider)\r\n\r\naboutSlider.buttons[0].addEventListener('click', () => {\r\n    aboutSlider.scrollTo(aboutSlider.activePage - 1 )\r\n})\r\n\r\naboutSlider.buttons[1].addEventListener('click', () => {\r\n    aboutSlider.scrollTo(aboutSlider.activePage + 1)\r\n})\r\n\r\n\r\nclass PageSlider extends Slider {\r\n    setContainerSize() {\r\n        super.setContainerSize(this.referenceContainer, false)\r\n        this.bodyPadding = +(\r\n            window.getComputedStyle(this.body)\r\n            .getPropertyValue('padding-top')\r\n            .slice(0, -2)\r\n            )\r\n        this.containerSize -= this.bodyPadding\r\n    }\r\n    \r\n    constructor(\r\n        scrollingContainerSelector,\r\n        referenceContainerSelector,\r\n        pageSelector, \r\n        buttonSelectors,\r\n        navSelectors\r\n        ) {\r\n        super(\r\n            scrollingContainerSelector,\r\n            referenceContainerSelector,\r\n            pageSelector, \r\n            buttonSelectors\r\n        )\r\n        \r\n        this.navSelectors = {\r\n            common: navSelectors['common'],\r\n            active: navSelectors['active']\r\n        }\r\n        \r\n        this.nav = Array.from(document.querySelectorAll(this.navSelectors['common']))\r\n        this.pagesCollection = this.pages.map((el, i) => {\r\n                                    return {\r\n                                        pageNode: this.pages[i],\r\n                                        pageNumber: this.pages.indexOf(this.pages[i]) + 1,\r\n                                        link: this.nav[i].children[0],\r\n                                        isActive: this.nav[i].classList.contains('menu__item--active')\r\n                                    }\r\n                                }) \r\n    }\r\n\r\n    isInView(element) {\r\n        this.rect = element.getBoundingClientRect()\r\n        \r\n        return (\r\n            this.rect.top >= 0 &&\r\n            this.rect.left >= 0 &&\r\n            this.rect.bottom <= (window.innerHeight || document.documentElement.clientHeight)\r\n        )\r\n    }\r\n\r\n    checkSliderState() {\r\n        this.setActivePage()\r\n        this.checkButtons(true)\r\n        this.checkBackground()\r\n    }\r\n\r\n    \r\n    setActivePage() {\r\n        this.pagesCollection.forEach((el, i) => {\r\n            if(this.isInView(this.pagesCollection[i].pageNode)) {\r\n                this.pagesCollection[i].link.parentNode.classList.add(this.navSelectors['active'].slice(1))\r\n                this.pagesCollection[i].isActive = true\r\n                this.activePage = this.pagesCollection[i].pageNumber\r\n            } else {\r\n                this.pagesCollection[i].link.parentNode.classList.remove(this.navSelectors['active'].slice(1))\r\n                this.pagesCollection[i].isActive = false\r\n            }\r\n        })\r\n}\r\n\r\n    checkBackground() {\r\n        if(this.activePage > 0) {\r\n            document.querySelector('.background').classList.add('background--main')\r\n        } else if(this.activePage === 0) {\r\n            document.querySelector('.background').classList.remove('background--main')\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\nconst pageSlider = new PageSlider(\r\n        '.pageContainer',\r\n        'body',\r\n        '.page--main',\r\n        {\r\n            common: '.sliderBtn',\r\n            disabled: '.sliderBtn--disabled'\r\n        },\r\n        {\r\n            common: '.menu__item', \r\n            active: '.menu__item--active' \r\n        }\r\n    )\r\n\r\nconsole.log(pageSlider)\r\n    \r\nwindow.onresize = () => {\r\n    pageSlider.fixPosition()\r\n}\r\n\r\n// redirecting on page through navigation menu\r\ndocument.querySelector('.menu').addEventListener('click', e => {\r\n    pageSlider.pagesCollection.forEach((el, i) => {\r\n        if(e.target === pageSlider.pagesCollection[i].link) {\r\n            pageSlider.scrollTo(\r\n                pageSlider.pagesCollection[i].pageNumber,\r\n                false, \r\n                true\r\n                )\r\n        } \r\n    })\r\n})\r\n\r\n// slide down on button clicking\r\npageSlider.buttons[0].addEventListener('click', () => {\r\n    pageSlider.scrollTo(pageSlider.activePage + 1, false, true)\r\n})\r\n\r\n// return to start page\r\ndocument.querySelector('.logo').addEventListener('click', () => {\r\n    pageSlider.container.removeAttribute('style')\r\n    pageSlider.activePage = 0\r\n})"]}