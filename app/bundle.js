(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Controller = void 0;
function Controller(arg) {
    var _a;
    let isEnabled = ((_a = arg.node) === null || _a === void 0 ? void 0 : _a.classList.contains(arg.activeSel)) ? true : false;
    return {
        getElement: () => arg.node,
        getState: () => isEnabled,
        renderState: (isActive) => {
            var _a, _b;
            if (isActive) {
                (_a = arg.node) === null || _a === void 0 ? void 0 : _a.classList.add(arg.activeSel);
            }
            else {
                (_b = arg.node) === null || _b === void 0 ? void 0 : _b.classList.remove(arg.activeSel);
            }
            isEnabled = isActive;
        },
    };
}
exports.Controller = Controller;
},{}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LinkedList = exports.linkNodes = exports.NodeF = void 0;
function NodeF(element) {
    return {
        element,
        next: null,
        prev: null
    };
}
exports.NodeF = NodeF;
function linkNodes(nodes) {
    return nodes.map((node, i, arr) => (Object.assign(node, {
        next: arr[i + 1],
        prev: arr[i - 1]
    })));
}
exports.linkNodes = linkNodes;
function LinkedList(nodes) {
    const collection = linkNodes([...nodes].map(NodeF));
    let head = collection[0];
    let tail = collection[collection.length - 1];
    let current = collection[0];
    return {
        getHead: () => head,
        getTail: () => tail,
        getCurrent: () => current,
        indexOf: (node) => node ? collection.indexOf(node) : null,
        setCurrent: (index) => collection[index] ? current = collection[index] : tail.next,
        toNext: () => current.next ? current = current.next : current.next,
        toPrev: () => current.prev ? current = current.prev : current.prev
    };
}
exports.LinkedList = LinkedList;
},{}],3:[function(require,module,exports){
"use strict";
var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.imgSlider = void 0;
const utils_1 = require("./utils");
const linked_list_1 = require("./linked_list");
const controller_1 = require("./controller");
const transformer_1 = require("./transformer");
const observer_1 = require("./observer");
const menu = {
    button: controller_1.Controller({
        node: document.querySelector('.burger'),
        activeSel: 'burger--active'
    }),
    nav: controller_1.Controller({
        node: document.querySelector('.menu'),
        activeSel: 'menu--active'
    })
};
(_a = document.querySelector('.burger')) === null || _a === void 0 ? void 0 : _a.addEventListener('click', () => {
    if (!menu.nav.getState()) {
        menu.button.renderState(true);
        menu.nav.renderState(true);
    }
    else {
        menu.button.renderState(false);
        menu.nav.renderState(false);
    }
});
exports.imgSlider = {
    pages: linked_list_1.LinkedList(document.querySelectorAll('.slider__img')),
    track: observer_1.TransformerObserver(transformer_1.Transformer({
        node: document.querySelector('.slider__inner'),
        action: 'translateX'
    })),
    nextButton: controller_1.Controller({
        node: document.querySelector('.controller--right'),
        activeSel: 'controller--active'
    }),
    prevButton: controller_1.Controller({
        node: document.querySelector('.controller--left'),
        activeSel: 'controller--active'
    }),
    checkButtons: function () {
        const current = this.pages.getCurrent();
        if (!(current === null || current === void 0 ? void 0 : current.prev)) {
            this.prevButton.renderState(false);
        }
        else if (!(current === null || current === void 0 ? void 0 : current.next)) {
            this.nextButton.renderState(false);
        }
        else {
            this.prevButton.renderState(true);
            this.nextButton.renderState(true);
        }
    }
};
(_b = document.querySelector('.controller--right')) === null || _b === void 0 ? void 0 : _b.addEventListener('click', utils_1.debounce(() => {
    const current = exports.imgSlider.pages.toNext();
    exports.imgSlider.track.update({
        value: current === null || current === void 0 ? void 0 : current.element.clientWidth,
        index: exports.imgSlider.pages.indexOf(current)
    });
    exports.imgSlider.checkButtons();
}, 300, true));
(_c = document.querySelector('.controller--left')) === null || _c === void 0 ? void 0 : _c.addEventListener('click', utils_1.debounce(() => {
    const current = exports.imgSlider.pages.toPrev();
    exports.imgSlider.track.update({
        value: current === null || current === void 0 ? void 0 : current.element.clientWidth,
        index: exports.imgSlider.pages.indexOf(current)
    });
    exports.imgSlider.checkButtons();
}, 300, true));
const pageSlider = {
    pages: linked_list_1.LinkedList(document.querySelectorAll('.page')),
    track: observer_1.TransformerObserver(transformer_1.Transformer({
        node: document.querySelector('.body__inner'),
        action: 'translateY'
    })),
    nextButton: controller_1.Controller({
        node: document.querySelector('.sliderBtn'),
        activeSel: 'sliderBtn--active'
    }),
    links: [...document.querySelectorAll('.pointer')]
        .map((el) => controller_1.Controller({
        node: el,
        activeSel: 'menu__link--active'
    })),
    background: controller_1.Controller({
        node: document.querySelector('.background'),
        activeSel: 'background--main'
    }),
    checkButton: function () {
        const current = this.pages.getCurrent();
        if (!current.next) {
            this.nextButton.renderState(false);
        }
        else {
            this.nextButton.renderState(true);
        }
    },
    checkBackground: function () {
        const current = this.pages.getCurrent();
        if (!current.prev) {
            this.background.renderState(false);
        }
        else {
            this.background.renderState(true);
        }
    }
};
const linkObservers = observer_1.ObserverList(pageSlider.links
    .map(l => observer_1.LinkObserver(l)));
const linkPublisher = observer_1.Publisher(linkObservers);
(_d = document.querySelector('.sliderBtn')) === null || _d === void 0 ? void 0 : _d.addEventListener('click', utils_1.debounce(() => {
    const current = pageSlider.pages.toNext();
    const index = pageSlider.pages.indexOf(current) || -1;
    pageSlider.track.update({
        value: current === null || current === void 0 ? void 0 : current.element.clientHeight,
        index: index
    });
    linkPublisher.notify(pageSlider.links[index].getElement());
    pageSlider.checkButton();
    pageSlider.checkBackground();
}, 300, true));
(_e = document.querySelector('.header')) === null || _e === void 0 ? void 0 : _e.addEventListener('click', utils_1.debounce((e) => {
    const controller = pageSlider.links.find((contr) => contr.getElement() === e.target);
    if (!controller)
        return;
    const index = pageSlider.links.indexOf(controller);
    const current = pageSlider.pages.setCurrent(index);
    pageSlider.track.update({
        value: current === null || current === void 0 ? void 0 : current.element.clientHeight,
        index: pageSlider.pages.indexOf(current)
    });
    if (utils_1.isMobile(1150)) {
        menu.nav.renderState(false);
        menu.button.renderState(false);
    }
    linkPublisher.notify(controller.getElement());
    pageSlider.checkButton();
    pageSlider.checkBackground();
}, 300, true));
const answers = observer_1.ObserverList([...document.querySelectorAll('.question__answer')].map(a => {
    return observer_1.LinkObserver(controller_1.Controller({
        node: a,
        activeSel: 'question__answer--active'
    }));
}));
const qaButtons = observer_1.ObserverList([...document.querySelectorAll('.question__controller')].map(c => {
    return observer_1.LinkObserver(controller_1.Controller({
        node: c,
        activeSel: 'question__controller--active'
    }));
}));
const answerPublisher = observer_1.Publisher(answers);
const qaButtonPublisher = observer_1.Publisher(qaButtons);
(_f = document.querySelector('.qa__wrapper')) === null || _f === void 0 ? void 0 : _f.addEventListener('click', (e) => {
    console.log(e);
    if (utils_1.isMobile(770)) {
        answerPublisher.notify(e.target.children[0]);
        qaButtonPublisher.notify(e.target.children[1]);
        return;
    }
    qaButtonPublisher.notify(e.target);
    answerPublisher.notify(e.target.previousElementSibling);
});
window.addEventListener('resize', utils_1.debounce(() => {
    const current = pageSlider.pages.getCurrent();
    pageSlider.track.update({
        value: current.element.clientHeight,
        index: pageSlider.pages.indexOf(current)
    });
}, 200));
},{"./controller":1,"./linked_list":2,"./observer":4,"./transformer":5,"./utils":6}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransformerObserver = exports.LinkObserver = exports.Publisher = exports.ObserverList = void 0;
function ObserverList(observers) {
    const _list = observers ? observers : [];
    return {
        attach: (obs) => _list.push(obs),
        detach: (obs) => _list.splice(_list.indexOf(obs), 1),
        getByIndex: (index) => _list[index],
        getIndexOf: (obs) => _list.findIndex(el => el === obs),
        getList: () => _list
    };
}
exports.ObserverList = ObserverList;
function Publisher(list) {
    let _observers = list ? list : ObserverList();
    return {
        subscribe: (obs) => _observers.attach(obs),
        unsubscribe: (obs) => _observers.detach(obs),
        notify: (data) => _observers.getList().forEach((obs) => obs.update(data))
    };
}
exports.Publisher = Publisher;
function LinkObserver(link) {
    const _link = link;
    return {
        update(data) {
            if (data === _link.getElement()) {
                _link.renderState(true);
            }
            else {
                _link.renderState(false);
            }
        }
    };
}
exports.LinkObserver = LinkObserver;
function TransformerObserver(transformer) {
    const _transformer = transformer;
    return {
        update(data) {
            _transformer.setValue(`-${data.value * data.index}px`);
            _transformer.render();
        }
    };
}
exports.TransformerObserver = TransformerObserver;
},{}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Transformer = void 0;
function Transformer(arg) {
    return {
        render: () => arg.node ?
            arg.node.style.transform = `${arg.action}(${arg.value})` :
            null,
        getElement: () => arg.node,
        setAction: (act) => (arg.action = act),
        setValue: (val) => (arg.value = val)
    };
}
exports.Transformer = Transformer;
},{}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.debounce = exports.isMobile = void 0;
const isMobile = (width) => window.innerWidth < width ? true : false;
exports.isMobile = isMobile;
function debounce(fn, wait, immediate) {
    let timeout;
    return function deffered(...args) {
        const callNow = immediate && !timeout;
        const invoke = () => {
            timeout = undefined;
            if (!immediate)
                fn.apply(deffered, args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(invoke, wait);
        if (callNow)
            fn.apply(deffered, args);
    };
}
exports.debounce = debounce;
},{}]},{},[3,2,4,1,5,6])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
